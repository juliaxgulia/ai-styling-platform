name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ai-styling-platform/package-lock.json
        
    - name: Install dependencies
      working-directory: ./ai-styling-platform
      run: npm ci
      
    - name: Run linting
      working-directory: ./ai-styling-platform
      run: npm run lint
      
    - name: Run unit tests
      working-directory: ./ai-styling-platform
      run: npm run test:unit
      
    - name: Run integration tests
      working-directory: ./ai-styling-platform
      run: npm run test:integration
      env:
        # Mock environment variables for testing
        AWS_REGION: us-east-1
        DYNAMODB_TABLE_NAME: test-table
        S3_BUCKET_NAME: test-bucket
        NEXTAUTH_SECRET: test-secret
        
    - name: Run security tests
      working-directory: ./ai-styling-platform
      run: npm run test:security
      
    - name: Generate test coverage
      working-directory: ./ai-styling-platform
      run: npm run test:ci
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./ai-styling-platform/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ai-styling-platform/package-lock.json
        
    - name: Install dependencies
      working-directory: ./ai-styling-platform
      run: npm ci
      
    - name: Build application
      working-directory: ./ai-styling-platform
      run: npm run build
      env:
        # Build-time environment variables
        AWS_REGION: us-east-1
        DYNAMODB_TABLE_NAME: placeholder
        S3_BUCKET_NAME: placeholder
        NEXTAUTH_SECRET: placeholder
        NEXTAUTH_URL: https://placeholder.vercel.app

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ai-styling-platform/package-lock.json
        
    - name: Install dependencies
      working-directory: ./ai-styling-platform
      run: npm ci
      
    - name: Run E2E tests
      working-directory: ./ai-styling-platform
      run: npm run test:e2e
      env:
        # E2E test environment variables
        AWS_REGION: us-east-1
        DYNAMODB_TABLE_NAME: test-table
        S3_BUCKET_NAME: test-bucket
        NEXTAUTH_SECRET: test-secret

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ai-styling-platform/package-lock.json
        
    - name: Install dependencies
      working-directory: ./ai-styling-platform
      run: npm ci
      
    - name: Run performance tests
      working-directory: ./ai-styling-platform
      run: npm run test:performance
      
    - name: Run load tests
      working-directory: ./ai-styling-platform
      run: npm run test:load

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./ai-styling-platform
        scope: ${{ secrets.VERCEL_ORG_ID }}
        alias-domains: |
          ai-styling-staging.vercel.app

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./ai-styling-platform
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Run post-deployment health check
      run: |
        sleep 30
        curl -f https://your-domain.vercel.app/api/health || exit 1
        
    - name: Notify deployment success
      if: success()
      run: echo "✅ Production deployment successful!"
      
    - name: Notify deployment failure
      if: failure()
      run: echo "❌ Production deployment failed!"